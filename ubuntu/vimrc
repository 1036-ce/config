set nocompatible    "采用vim自己的操作命令
filetype off                  " required

" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')
Plug 'jiangmiao/auto-pairs', {'for': ['cpp','c','java','python','vim'] }
Plug 'luochen1990/rainbow', {'for': ['cpp','c','java','python']}

Plug 'preservim/nerdtree', {'on': ['NERDTree','NERDTreeToggle'] }
Plug 'preservim/tagbar', {'on': 'TagbarToggle'}

Plug 'lifepillar/vim-solarized8'

Plug 'vim-airline/vim-airline'

Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}

"所有常用的snippet都在vim-snippets里
Plug 'honza/vim-snippets'
"Ulitsnips 是引擎
Plug 'Sirver/ultisnips'

"解决ycm与snippets键位冲突
Plug 'ervandew/supertab'
"vim 中文帮助文档
Plug 'yianwillis/vimcdoc'
Plug 'lervag/vimtex', {'for': 'tex'}
"vim启动界面
Plug 'mhinz/vim-startify'
"注释
Plug 'preservim/nerdcommenter'
"fzf
Plug 'junegunn/fzf', {'do' :{-> fzf#install()}}
Plug 'junegunn/fzf.vim'
call plug#end()
filetype plugin indent on    " required

" branch/tag/commit		Branch/tag/commit of the repository to use
" rtp					Subdirectory that contains Vim plugin
" dir					Custom directory for the plugin
" as					Use different name for the plugin
" do					Post-update hook (string or funcref)
" on					On-demand loading: Commands or <Plug>-mappings
" for					On-demand loading: File types
" frozen				Do not update unless explicitly specified

let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 0
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings = 1
let g:ycm_key_invoke_completion = '<c-z>'

set completeopt=menu,menuone

noremap <c-z> <NOP>

let g:ycm_semantic_triggers =  { 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'], 'cs,lua,javascript': ['re!\w{2}'],}

"highlight PMenu ctermbg=0 ctermbg=248 guifg=black guibg=darkgrey
"highlight PMenuSel ctermbg=248 ctermbg=8 guifg=darkgrey guibg=black


"snippets
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<Up>']
let g:SuperTabDefaultCompletionType = '<tab>'
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsSnippetDirectories = ['~/.vim/bundle/UltiSnips', 'UltiSnips']
let g:UltiSnipsExpandTrigger = "<C-j>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" 彩虹括号
let g:rainbow_active=1

"tagbar
let g:tagbar_position='left'
let g:tagbar_width=33
nmap <C-t> :TagbarToggle<CR>


"taglist
"filetype plugin indent on
"nnoremap <C-t>  :Tlist<CR>
"inoremap <C-t>  <ESC>:Tlist<CR>
"let Tlist_Sort_Type = "name"    "按照名称排序
""let Tlist_Use_Right_Window = 1  " 在右侧显示窗口
"let Tlist_Use_SingleClisk = 1   "单击tag就跳转
""let Tlist_Auto_Open = 1    "启动vim后自动打开Tlist
"let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的 
"let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口，则退出vim 

"nerdtree
nnoremap <C-p> :NERDTree<CR>
inoremap <C-p> <ESC>:NERDTree<CR>
nnoremap <C-p> :NERDTreeToggle<CR>
inoremap <C-p> <ESC>:NERDTreeToggle<CR>
let g:NERDTreeWinPos = 'right'  "窗口在右侧
let g:NERDTreeHidden = 0    "不显示隐藏文件

"退出vim时 如果只有NERDTree就全部关闭
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" vim-airline
let laststatus=2
let g:airline_powerline_fonts=1
"打开tabline功能，方便查看Buffer和切换
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
nnoremap <C-k> :bn<CR>
inoremap <C-k> <ESC>:bn<CR>
nnoremap <C-j> :bp<CR>
inoremap <C-j> <ESC>:bp<CR>
nnoremap bb :bd<CR>
nnoremap <C-w> <C-w>w<CR>
nnoremap <C-w> <ESC><C-w>w<CR>
" :bn   :bp     为buffer命令
"关闭状态显示空白符号计数
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
"powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.colnr = ' :'
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ' :'
let g:airline_symbols.maxlinenr = '☰ '
let g:airline_symbols.dirty='⚡'

"vim-tex
"LaTeX配置
let g:vimtex_compiler_latexmk_engines = {'_':'-xelatex'}
let g:vimtex_compiler_latexrun_engines ={'_':'xelatex'}
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'


"nerdcommenter
"对美化的多行注释使用紧凑语法
let  g:NERDCompactSexyComs  =  1
" Align line-wise comment delimiters flush left 而不是下面的代码缩进
let  g:NERDDefaultAlign  =  ' left '
" 注释后添加空格
let g:NERDSpaceDelims=1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=dark
autocmd vimenter * ++nested colorscheme solarized8_high
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4   "Tab转为4个空格
set noexpandtab     "不要用空格代替制表符

set nobackup		"不需要备份文件
set noswapfile		"不创建临时交换文件
set nowritebackup	"编辑的时候不需要备份文件
set noundofile		"不创建撤销文件
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"gvim config
set go=
set guifont=YaHeiConsolasHybrid\ 14
set shortmess=atI   "启动时不显示援助乌干达儿童
winpos 235 235
"set lines=24
"set columns=80
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nu  "显示行号
set rnu	"相对行号
set showcmd     "显示命令
set showmode    "显示当前模式
syntax on   "语法高亮
set mouse=a     "支持鼠标
set encoding=utf-8

"set t_Co=256        "使用256色
"使用真彩
if has("termguicolors")
	set termguicolors
endif

set autoindent      "按下回车键后，下一行的缩进会自动跟上一行的缩进保持一致
set smartindent
"set cursorline      "光标所在行高亮
"hi Cursorline   cterm=NONE  ctermbg=black 
"设置背景颜色为黑色
set wrap    "自动折行，即太长的行分成几行显示
"set nowrap "关闭自动折行
"set sidescrolloff=15 
"水平滚动时，光标距离行首或者行尾的位置，在不折行时有用
set scrolloff=3
"垂直滚动时，光标距离行首或者行尾的位置=3
set ruler   "在状态栏显示光标的当前位置

set showmatch
"光标在遇到括号时，自动高亮对应的另一个括号
set matchtime=1     "匹配括号高亮的时间
set hlsearch
"搜索时，高亮显示匹配结果
set incsearch
"输入搜索模式时，每输入一个字符，就自动调到第一个匹配的结果
set ignorecase
"搜索时忽略大小写
"set undofile
"保留撤销历史
"Vim 会在编辑时保存操作历史，用来供用户撤消更改。默认情况下，操作记录只 
""在本次编辑时有效，一旦编辑结束、文件关闭，操作历史就消失了。
"打开这个设置，可以在文件关闭后，操作记录保留在一个文件里面，继续存在
"这意味着，重新打开一个文件，可以撤销上一次编辑时的操作。撤消文件是跟
"原文件保存在一起的隐藏文件，文件名以.un~开头。
"set undodir=~/.vim/.undo// 
"设置操作历史文件的保存位置。
"结尾的//表示生成的文件名带有绝对路径，路径中用%替换目录分隔符
"这样可以防止文件重名
set autochdir
"自动切换工作目录
"这主要用在一个 Vim 会话之中打开多个文件的情况
"默认的工作目录是打开的第一个文件的目录。
"该配置可以将工作目录自动切换到正在编辑的文件的目录。
set noerrorbells
"出错时不要发出响声
"set visualbell
"出错时，发出视觉提示
set history=1000
"vim需要记住1000次历史操作
set autoread
"打开文件监视
"如果在编辑过程中文件发生外部改变（被其他编辑器更改）就会发出提示
set wildmenu
set wildmode=longest:list,full
"命令模式下，底部操作指令按下 Tab 键自动补全
"第一次按下 Tab，会显示所有匹配的操作指令的清单
"第二次按下 Tab，会依次选择各个指令。

set foldcolumn=0
set foldmethod=indent
set foldlevel=10
set foldenable  "允许折叠

"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
"set laststatus=1    "显示状态行
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"键盘映射
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>  :TlistUpdate<CR>
imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>  :TlistUpdate<CR>
map <F4> :UpdateTypesFile<CR>
imap <F4> <ESC>:UpdateTypesFile<CR>

"<F10> 编译
nnoremap <F10> :call CompileRunGcc()<CR>

func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec '!gcc -g % -o %<'
    elseif &filetype == 'cpp'
        exec '!g++ -g % -o %<'
    endif
endfunc

"<F9> 运行
nnoremap <F9> :call RunFunction()<CR>

func! RunFunction()
    exec '!./%<'
endfunc

"<F8> 调试
nnoremap <F8> :call RunGdb()<CR>

func! RunGdb()
    exec '!gdb -tui ./%<'
endfunc

let mapleader=","
map <C-a> gg V G
vmap <C-c> "+y

let mapleader=","
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
